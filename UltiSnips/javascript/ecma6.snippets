# -----------------------------------------------------------------------------

snippet nodejs "Nodejs file header"
/* jshint node:true */
'use strict';

$0
endsnippet
# -----------------------------------------------------------------------------

snippet foreach "forEach loop on an array" 
${1:<array>}.forEach((item, index) => {
	$0
});
endsnippet
# -----------------------------------------------------------------------------

snippet filter "filter elements in an array" 
${1:<array>}.filter((item, index) => {
	$0
});
endsnippet
# -----------------------------------------------------------------------------

snippet props "Loop through all properties of an object"
for(let prop in ${1:<object>}) {
	const value = $1[prop];
	$0
}
endsnippet
# -----------------------------------------------------------------------------

snippet arrow "Arrow function" 
(${1:<arg1>}, ${2:<arg2>}) => {
	$0
}
endsnippet
# -----------------------------------------------------------------------------

snippet class "Class with no inheritance"
/* jshint node:true */
'use strict';

/**
 * ${2:<class description>}
 */
class ${1:<class name>} {
    /**
     * @param {${3:type}} ${4:<param1>} ${5:<description>}
     * @param {${6:type}} ${7:<param1>} ${8:<description>}
     * @param {${9:type}} ${10:<param1>} ${11:<description>}
     */
    constructor($4, $7, $10) {
        super();
    }

	$0
}

module.exports=$1;
endsnippet
# -----------------------------------------------------------------------------

snippet cclass "Child class that extends an existing class"
/* jshint node:true */
'use strict';

const $2 = require('${3:<path to base class>}');

/**
 * ${4:<class description>}
 *
 * @extends {$2}
 */
class ${1:<class name>} extends ${2:<base class>} {
    /**
     * @param {${5:type}} ${6:<param1>} ${7:<description>}
     * @param {${8:type}} ${9:<param2>} ${10:<description>}
     * @param {${11:type}} ${12:<param3>} ${13:<description>}
     */
    constructor($6, $9, $12) {
        super();
    }

	$0
}

module.exports=$1;
endsnippet
# -----------------------------------------------------------------------------

snippet module "Basic javascript module"
/* jshint node:true */
'use strict';

/**
 * ${2:<module description>}
 */
const ${1:<module name>} = {
	$0
}

module.exports=$1;
endsnippet
# -----------------------------------------------------------------------------

snippet argstr "Argument validation for non empty string arg"
if(typeof ${1:<arg>} !== 'string' || $1.length <= 0) {
	throw new Error('Invalid ${2:<arg name>} specified (arg #${3:<arg number>})');
}
endsnippet
# -----------------------------------------------------------------------------

snippet argnum "Argument validation for positive, non zero number arg"
if(typeof ${1:<arg>} !== 'number' || $1 <= 0) {
	throw new Error('Invalid ${2:<arg name>} specified (arg #${3:<arg number>})');
}
endsnippet
# -----------------------------------------------------------------------------

snippet argobj "Argument validation for an object arg"
if(!${1:<arg>} || !($1 instanceof Array) || typeof $1 !== 'object') {
	throw new Error('Invalid ${2:<arg name>} specified (arg #${3:<arg number>})');
}
endsnippet
# -----------------------------------------------------------------------------

snippet argarr "Argument validation for an array arg"
if(!(${1:<arg>} instanceof Array)) {
	throw new Error('Invalid ${2:<arg name>} specified (arg #${3:<arg number>})');
}
endsnippet
# -----------------------------------------------------------------------------

snippet promise "Basic promise wrapper"
const promise = new Promise((reject, resolve) => {
	$0
});
endsnippet
# -----------------------------------------------------------------------------
