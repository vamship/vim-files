# -----------------------------------------------------------------------------

snippet testjs "Javascript test file"
/* jshint node:true, expr:true */
'use strict';

const _sinon = require('sinon');
const _chai = require('chai');
_chai.use(require('sinon-chai'));
_chai.use(require('chai-as-promised'));
const expect = _chai.expect;

const ${1:<test target>} = require('${2:<module path>}');

describe('$1', () => {

    describe('ctor()', () => {
        $0
    });
});
endsnippet
# -----------------------------------------------------------------------------

snippet testdesc "Describe section for tests"
describe('${1:<suite name>}', () => {
    $0
});
endsnippet
# -----------------------------------------------------------------------------

snippet testit "It section for tests"
it('should ${1:<test description>}', () => {
    $0
});
endsnippet
# -----------------------------------------------------------------------------

snippet teststr "Test for string argument"
it('should throw an error if invoked without a valid ${1:<param description>}', () => {
    const message = 'Invalid ${2:<property name>} (arg #${3:<arg number>})';
    _testValues.allButString(${4:''}).forEach(($2) => {
        const wrapper = () => {
            $0
        };

        expect(wrapper).to.throw(ArgError, message);
    });
});
endsnippet
# -----------------------------------------------------------------------------

snippet testnum "Test for number argument"
it('should throw an error if invoked without a valid ${1:<param description>}', () => {
    const message = 'Invalid ${2:<property name>} (arg #${3:<arg number>})';
    _testValues.allButNumber(${4:-1}).forEach(($2) => {
        const wrapper = () => {
            $0
        };

        expect(wrapper).to.throw(ArgError, message);
    });
});
endsnippet
# -----------------------------------------------------------------------------

snippet testobj "Test for object argument"
it('should throw an error if invoked without a valid ${1:<param description>}', () => {
    const message = 'Invalid ${2:<property name>} (arg #${3:<arg number>})';
	const inputs = _testValues.allButObject();

    inputs.forEach(($2) => {
        const wrapper = () => {
            $0
        };

        expect(wrapper).to.throw(ArgError, message);
    });
});
endsnippet
# -----------------------------------------------------------------------------

snippet testarr "Test for array argument"
it('should throw an error if invoked without a valid ${1:<param description>}', () => {
    const message = 'Invalid ${2:<property name>} (arg #${3:<arg number>})';
    const inputs = _testValues.allButArray();

    inputs.forEach(($2) => {
        const wrapper = () => {
            $0
        };

        expect(wrapper).to.throw(ArgError, message);
    });
});
endsnippet
# -----------------------------------------------------------------------------

snippet testfunc "Test for function argument"
it('should throw an error if invoked without a valid ${1:<param description>}', () => {
    const message = 'Invalid ${2:<property name>} (arg #${3:<arg number>})';
    const inputs = _testValues.allButFunction();

    inputs.forEach(($2) => {
        const wrapper = () => {
            $0
        };

        expect(wrapper).to.throw(ArgError, message);
    });
});
endsnippet
# -----------------------------------------------------------------------------
